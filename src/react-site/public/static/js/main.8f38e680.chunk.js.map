{"version":3,"sources":["components/Colours.tsx","components/Header.tsx","components/PercentageBar.tsx","components/SpecTree.tsx","components/SpecView.tsx","components/Dashboard.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Colours","Header","state","builds","selected","disabled","value","a","this","fetchData","fetch","response","json","body","setState","event","props","selectedBuild","target","id","className","Group","align","Alignment","LEFT","Heading","RIGHT","options","onChange","e","selectBuild","Divider","icon","React","PercentageBar","data","undefined","showZeroValues","view","forEach","percentageBarSegment","segment","createSegment","push","style","flexGrow","backgroundColor","colour","label","prevProps","prevState","console","log","Component","resultColour","green","yellow","red","SpecTree","selectedSpec","treeNodeInfo","filter","percentageBarData","handleNodeClick","nodeData","_nodePath","originallySelected","isSelected","shiftKey","forEachNode","n","handleNodeCollapse","isExpanded","handleNodeExpand","hasResults","length","noSearchResults","noBuildSelected","type","leftIcon","placeholder","rightElement","minimal","nodes","callback","node","childNodes","title","description","contents","onNodeClick","onNodeCollapse","onNodeExpand","Classes","ELEVATION_0","build","buildTreeNodeInfo","createPercentageBarData","passed","skipped","failed","testDirectory","testDir","results","result","sessionId","capabilities","relativePath","specs","substring","lastIndexOf","folderHierarchy","split","file","pop","includes","createTreeNodeInfo","remainingFolderHierarchy","currentTreeNodeInfo","remainingFolder","index","desiredTreeNodeInfo","find","nestedTreeNodeInfo","appendTreeNodeInfo","newTreeNodeInfo","secondaryLabel","renderTestDots","sort","sortTreeNodeInfo","states","map","color","marginTop","marginBottom","treeNodeInfoA","treeNodeInfoB","browsers","faChrome","faEdge","faFirefoxBrowser","faOpera","faSafari","platforms","faLinux","faApple","faWindows","SpecView","overlayDisplayed","displayDetails","noSpecSelected","renderDetail","H3","text","flexBasis","renderTags","H5","platformName","determineIcon","browserName","start","end","calculateTotalTime","textAlign","radius","animate","lineWidth","height","parseInt","dataEntry","Math","round","percentage","labelPosition","justifyContent","marginLeft","marginRight","acceptanceCriteria","renderSteps","suites","collection","matcher","fallback","tags","tag","H","size","RUNNING_TEXT","array","depth","item","tests","childSuites","hooks","filterAndReturnHookElements","test","generateTestElement","generateSuiteElement","hook","associatedTest","associatedSuite","name","hookSteps","steps","step","generateStepElement","generateHookElement","suite","children","renderDivider","renderTimeLine","renderIndents","fontWeight","paddingTop","renderNestedDivider","renderIcon","duration","expectation","actual","error","renderStackTrace","screenshotPath","renderScreenshot","Array","from","width","background","position","Position","content","CARD","message","expected","toString","operator","stack","cursor","onClick","window","open","unixStartTime","Date","parse","unixEndTime","seconds","toFixed","minutes","floor","hours","Dashboard","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8f38e680.chunk.js","sourcesContent":["export enum Colours {\n    green = \"#BECF6B\",\n    yellow = \"#FED478\",\n    red = \"#D57E7E\"\n}\n\nexport const resultColour: ColourCollection = {\n    \"passed\": Colours.green,\n    \"skipped\": Colours.yellow,\n    \"failed\": Colours.red,\n    \"failed skipped\": Colours.yellow,\n    \"passed skipped\": Colours.yellow,\n}\n\nexport interface ColourCollection {\n    [key: string]: Colours;\n}","import {\n    HTMLSelect,\n    Button,\n    Alignment,\n    Navbar\n} from \"@blueprintjs/core\";\n\nimport * as React from \"react\";\nimport './Header.css';\n\nexport interface IHeaderState {\n    builds: any[]\n}\n\ninterface IHeaderProps {\n    selectedBuild: Function\n}\n\nexport class Header extends React.Component<IHeaderProps, IHeaderState> {\n\n    public state: IHeaderState = { builds: [{selected: true, disabled: true, value: \"Please select a build\"}] };\n    \n\n    async componentDidMount() {\n        await this.fetchData();\n    }\n\n    private async fetchData() {\n        const response = await fetch('/builds');\n        const body = await response.json();\n\n        this.setState({builds: [...this.state.builds, ...body.builds]})\n    }\n\n    private selectBuild(event: React.ChangeEvent<HTMLSelectElement>) {\n        this.props.selectedBuild(event.target.value)\n    }\n    \n    public render() {\n        return (\n            <Navbar id=\"header\" className=\"header\">\n                <Navbar.Group align={Alignment.LEFT}>\n                    <Navbar.Heading>Report</Navbar.Heading>\n                </Navbar.Group>\n                <Navbar.Group align={Alignment.RIGHT}>\n                    <HTMLSelect options={this.state.builds} onChange={e => this.selectBuild(e)} />\n                    <Navbar.Divider />\n                    <Button className=\"bp3-minimal\" icon=\"cog\" />\n                </Navbar.Group>\n            </Navbar>\n        );\n    }\n\n}","import React from 'react';\n\nimport './PercentageBar.css';\nimport { Colours, resultColour } from \"./Colours\";\n\nexport interface PercentageBarSegment {\n    label: string\n    value: number\n    colour: Colours\n}\n\ninterface IPercentageBarProps {\n    data: PercentageBarSegment[] | undefined\n    showZeroValues?: Boolean\n}\n\ninterface IPercentageBarState {\n    data: PercentageBarSegment[] | undefined\n}\n\nexport class PercentageBar extends React.Component<IPercentageBarProps, IPercentageBarState> {\n    \n    public props: IPercentageBarProps = { data: undefined, showZeroValues: false }\n    public state: IPercentageBarState = { data: undefined }\n\n    public render() {\n\n        const view: JSX.Element[] = []\n        this.state.data?.forEach(percentageBarSegment => {\n            if (percentageBarSegment.value !== 0 || this.props.showZeroValues) {\n                const segment = this.createSegment(percentageBarSegment)\n                view.push(segment)\n            }\n        })\n\n        return (\n            <div className=\"flex small-rounded\">\n                {view}\n            </div>    \n        );\n    }\n\n    private createSegment(percentageBarSegment: PercentageBarSegment): JSX.Element {\n        return <div className=\"percentageBarSegment\" style={{\n            flexGrow: percentageBarSegment.value,\n            backgroundColor: percentageBarSegment.colour\n        }}>{percentageBarSegment.label}</div>\n    }\n\n    static getDerivedStateFromProps(props: IPercentageBarProps, state: IPercentageBarState) {\n        if (state.data !== props.data) {\n            return {\n                data: props.data\n            }\n        }\n        return null\n    }\n\n    async componentDidUpdate(prevProps: IPercentageBarProps, prevState: IPercentageBarState) {\n        console.log(\"percentage bar did update\")\n    }\n\n}","import * as React from \"react\";\nimport './SpecTree.css';\n\nimport {\n    Button,\n    Classes,\n    Icon,\n    InputGroup,\n    NonIdealState,\n    TreeNodeInfo,\n    Tree\n} from \"@blueprintjs/core\";\nimport { PercentageBar, PercentageBarSegment } from \"./PercentageBar\";\nimport { Colours, resultColour } from \"./Colours\";\n\nexport interface ISpecTreeState {\n    selectedBuild: string | undefined;\n    data: any | undefined;\n    treeNodeInfo: TreeNodeInfo[];\n    filter: string;\n    percentageBarData: PercentageBarSegment[]\n}\n\nexport interface ISpecTreeProps {\n    selectedBuild: string | undefined\n    selectedSpec: Function | undefined\n}\n\n// use Component so it re-renders everytime: `nodes` are not a primitive type\n// and therefore aren't included in shallow prop comparison\nexport class SpecTree extends React.Component<ISpecTreeProps, ISpecTreeState> {\n\n    public props: ISpecTreeProps = { selectedBuild: undefined, selectedSpec: undefined }\n    public state: ISpecTreeState = { \n        selectedBuild: undefined, \n        data: undefined, \n        treeNodeInfo: [], \n        filter: \"\", \n        percentageBarData: [\n            { label: \"\", value: 1, colour: Colours.green }\n        ]\n    };\n\n    public render() {\n\n        let view\n\n        if (this.state.treeNodeInfo !== undefined) {\n            view = this.hasResults()\n            console.log(\"3\")\n        }\n        if (this.state.treeNodeInfo.length === 0) {\n            view = this.noSearchResults()\n            console.log(\"2\")\n        } \n        if (this.props.selectedBuild === undefined || this.state.data === undefined || this.state.treeNodeInfo === undefined) {\n            view = this.noBuildSelected()\n            console.log(\"1\")\n        }\n\n        return (\n            <div id=\"specTree\" className=\"flex flex-column grid-gap\">\n                <PercentageBar data={this.state.percentageBarData} />\n                <InputGroup \n                    type=\"text\"\n                    leftIcon=\"search\"\n                    placeholder=\"Filter..\"\n                    onChange={e => this.setState({filter: e.target.value})}\n                    rightElement={<Button icon=\"chevron-right\" minimal={true} />}\n                />\n                {view}\n            </div>\n        )\n    }\n\n    private handleNodeClick = (\n        nodeData: TreeNodeInfo,\n        _nodePath: number[],\n        e: React.MouseEvent<HTMLElement>\n    ) => {\n        const originallySelected = nodeData.isSelected;\n        if (!e.shiftKey) {\n            this.forEachNode(this.state.treeNodeInfo, (n) => (n.isSelected = false));\n        }\n        nodeData.isSelected =\n            originallySelected == null ? true : !originallySelected;\n        this.setState(this.state);\n        console.log(nodeData.id)\n        console.log(nodeData.nodeData)\n        this.props.selectedSpec!(nodeData.nodeData)\n    };\n\n    private handleNodeCollapse = (nodeData: TreeNodeInfo) => {\n        nodeData.isExpanded = false;\n        this.setState(this.state);\n    };\n\n    private handleNodeExpand = (nodeData: TreeNodeInfo) => {\n        nodeData.isExpanded = true;\n        this.setState(this.state);\n    };\n\n    private forEachNode(nodes: TreeNodeInfo[], callback: (node: TreeNodeInfo) => void) {\n        if (nodes == null) {\n            return;\n        }\n\n        for (const node of nodes) {\n            callback(node);\n            node.childNodes && this.forEachNode(node.childNodes, callback)\n        }\n    }\n\n    private noBuildSelected() {\n        return <NonIdealState className=\"flex-grow\"\n            icon=\"help\"\n            title=\"Select a build\"\n            description={\"Select a build from the dropdown to start viewing reports\"}\n        />\n    };\n\n    private noSearchResults() {\n        return <NonIdealState className=\"flex-grow\"\n            icon=\"search\"\n            title=\"No specs found\"\n            description=\"Please update your filters\"\n        />\n    };\n\n    private hasResults() {\n        return <Tree\n            contents={this.state.treeNodeInfo}\n            onNodeClick={this.handleNodeClick}\n            onNodeCollapse={this.handleNodeCollapse}\n            onNodeExpand={this.handleNodeExpand}\n            className={Classes.ELEVATION_0} \n        />\n    };\n\n    private async fetchData(build: string) {\n        const response = await fetch(`/builds/${build!}`);\n        const body = await response.json();\n        this.setState({data: body})\n    }\n\n    static getDerivedStateFromProps(props: ISpecTreeProps, state: ISpecTreeState) {\n        if (state.selectedBuild !== props.selectedBuild) {\n            return {\n                selectedBuild: props.selectedBuild\n            }\n        }\n        return null\n    }\n\n    async componentDidUpdate(prevProps: ISpecTreeProps, prevState: ISpecTreeState) {\n        console.log(\"did update\")\n\n        if (this.state.selectedBuild !== prevState.selectedBuild) { // new build selected\n            await this.fetchData(this.props.selectedBuild!)\n        }\n        if (\n            (this.state.data !== prevState.data) ||                                   // new build has completed loading from api OR\n            (this.state.filter !== prevState.filter && this.state.data !== undefined) // filter text has changed and data has already been loaded\n        ) {\n            await this.buildTreeNodeInfo()\n            await this.createPercentageBarData()\n        }\n    }\n\n    private async createPercentageBarData() {\n        const data = [\n            { label: this.state.data.passed, value: this.state.data.passed, colour: Colours.green },\n            { label: this.state.data.skipped, value: this.state.data.skipped, colour: Colours.yellow },\n            { label: this.state.data.failed, value: this.state.data.failed, colour: Colours.red }\n        ]\n\n        this.setState({percentageBarData: data})\n    }\n\n    private async buildTreeNodeInfo() {\n        console.log(\"build tree\")\n        \n        const testDirectory = this.state.data.testDir\n        const treeNodeInfo: TreeNodeInfo[] = []\n        const results = this.state.data.results\n\n        for (const result of results) {\n                                          \n            const sessionId = result.capabilities.sessionId\n            const relativePath = result.specs[0].substring(result.specs[0].lastIndexOf(testDirectory) + testDirectory.length)\n            const folderHierarchy = relativePath.split(\"/\")\n            const file = folderHierarchy.pop() \n            \n            if (relativePath.includes(this.state.filter)) {\n                this.createTreeNodeInfo(sessionId, folderHierarchy, file, result, treeNodeInfo)\n            }\n        };\n\n        this.setState({treeNodeInfo: treeNodeInfo})\n    }\n\n    private createTreeNodeInfo(sessionId: string, remainingFolderHierarchy: string[], file: string, result: any, currentTreeNodeInfo: TreeNodeInfo[]) {\n\n        // build directories\n        remainingFolderHierarchy.forEach((remainingFolder, index) => {\n\n            let desiredTreeNodeInfo = currentTreeNodeInfo.find(nestedTreeNodeInfo => nestedTreeNodeInfo.label === remainingFolder)\n\n            if (!desiredTreeNodeInfo) {\n                const createdDesiredTreeNodeInfo = this.appendTreeNodeInfo(currentTreeNodeInfo, \"FOLDER\", index, remainingFolder, undefined)\n                desiredTreeNodeInfo = createdDesiredTreeNodeInfo\n            }\n\n            currentTreeNodeInfo = desiredTreeNodeInfo.childNodes!\n        })\n\n        // finally add the spec\n        this.appendTreeNodeInfo(currentTreeNodeInfo, \"SPEC\", sessionId, file, result)\n    }\n\n    private appendTreeNodeInfo(currentTreeNodeInfo: TreeNodeInfo[], type: \"SPEC\" | \"FOLDER\", id: string | number, label: string, data: any): TreeNodeInfo {\n        let newTreeNodeInfo: TreeNodeInfo\n        switch(type) {\n            case \"FOLDER\":\n                newTreeNodeInfo = {\n                    id: `${id}-${label}`,\n                    icon: \"folder-close\",\n                    label: label,\n                    childNodes: [],\n                }\n                break\n            case \"SPEC\":\n                newTreeNodeInfo = {\n                    id: id,\n                    icon: \"document\",\n                    label: label,\n                    secondaryLabel: this.renderTestDots(data.state.state),\n                    nodeData: data\n                }\n                break \n        }\n        currentTreeNodeInfo.push(newTreeNodeInfo)\n        currentTreeNodeInfo.sort(this.sortTreeNodeInfo())\n\n        return newTreeNodeInfo\n    }\n\n    private renderTestDots(states: string[]): JSX.Element {\n        return <div> {\n            states.map(state => {\n                return <Icon icon=\"dot\" color={resultColour[state]} style={{marginTop: \"auto\", marginBottom: \"auto\"}} />\n            })\n        }\n        </div>\n    }\n\n    private sortTreeNodeInfo() {\n        return function(treeNodeInfoA: TreeNodeInfo, treeNodeInfoB: TreeNodeInfo) {\n            if (treeNodeInfoA.icon === treeNodeInfoB.icon) {\n                if (treeNodeInfoB.label! < treeNodeInfoA.label!) {\n                    return 1\n                } else {\n                    return 0\n                }\n            } else if (treeNodeInfoA.icon! > treeNodeInfoB.icon!) {\n                return 0;\n            } else if (treeNodeInfoA.icon! < treeNodeInfoB.icon!) {\n                return 1;\n            }\n            return 0\n        }\n    }   \n\n}\n","import * as React from \"react\";\nimport './SpecView.css';\n\nimport {\n    Classes,\n    Divider,\n    NonIdealState,\n    H3, H5, Icon,\n    Overlay,\n    Tag,\n    Tooltip,\n    Position,\n    Popover\n} from \"@blueprintjs/core\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faChrome, faFirefoxBrowser, faOpera, faSafari, faApple, faLinux, faWindows, faEdge, IconDefinition } from '@fortawesome/free-brands-svg-icons'\nimport { PieChart } from 'react-minimal-pie-chart';\nimport { Colours, resultColour } from \"./Colours\";\n\ninterface ISpecViewProps {\n    selectedSpec: any | undefined\n}\n\ninterface ISpecViewState {\n    overlayDisplayed: boolean\n}\n\ninterface IconCollection {\n    [key: string]: IconDefinition;\n}\n\nconst browsers: IconCollection = {\n    \"chrome\": faChrome,\n    \"edge\": faEdge,\n    \"firefox\": faFirefoxBrowser,\n    \"opera\": faOpera,\n    \"safari\": faSafari,\n}\n\nconst platforms = {\n    \"linux\": faLinux,\n    \"mac os x\": faApple,\n    \"windows\": faWindows,\n}\n\nexport class SpecView extends React.Component<ISpecViewProps> {\n\n    public props: ISpecViewProps = { selectedSpec: undefined }\n    public state: ISpecViewState = { overlayDisplayed: false }\n\n    public render() {\n        return (\n            <div id=\"specView\" className=\"flex flex-grow flex-column\">\n                {this.displayDetails()}\n            </div>\n        )\n    }\n\n    private displayDetails(): JSX.Element {\n\n        let view;\n        if (this.props.selectedSpec === undefined) {\n            view = this.noSpecSelected()\n        } else {\n            view = <div className=\"flex flex-column\">\n                {this.renderDetail(H3, this.props.selectedSpec.specs[0].split(\"/\").pop(), { text: \"\" })}\n                <div className=\"flex flex-row grid-gap\">\n                    <div className=\"flex flex-column flex-grow\" style={{ flexBasis: \"30rem\" }}>\n                        {this.renderTags()}\n                        <div className=\"flex flex-row grid-gap\">\n                            {this.renderDetail(H5, \"Platform\", { text: this.props.selectedSpec.capabilities.platformName }, this.determineIcon(platforms, this.props.selectedSpec.capabilities.platformName, faLinux))}\n                            {this.renderDetail(H5, \"Browser\", { text: this.props.selectedSpec.capabilities.browserName }, this.determineIcon(browsers, this.props.selectedSpec.capabilities.browserName, faChrome))}\n                        </div>\n                        {this.renderDetail(H5, \"Start Time\", { text: this.props.selectedSpec.start })}\n                        {this.renderDetail(H5, \"End Time\", { text: this.props.selectedSpec.end })}\n                        {this.renderDetail(H5, \"Total Time\", { text: this.calculateTotalTime() })}\n                        {this.renderDetail(H5, \"Session\", { text: this.props.selectedSpec.capabilities.sessionId })}\n                        {this.renderDetail(H5, \"Filepath\", { text: this.props.selectedSpec.specs[0] })}\n                    </div>\n\n                    <div className=\"flex flex-column grid-gap\" style={{ flexBasis: \"30rem\", textAlign: \"center\" }}>\n\n                        <PieChart radius={50} animate={true} lineWidth={25} style={{ textAlign: \"center\", height: \"15rem\" }}\n                            data={[\n                                { title: 'Passed', value: parseInt(this.props.selectedSpec.state.passed), color: Colours.green },\n                                { title: 'Skipped', value: parseInt(this.props.selectedSpec.state.skipped), color: Colours.yellow },\n                                { title: 'Failed', value: parseInt(this.props.selectedSpec.state.failed), color: Colours.red },\n                            ]}\n                            label={({ dataEntry }) => {\n                                if (dataEntry.title === \"Passed\") {\n                                    return Math.round(dataEntry.percentage) + '%'\n                                }\n                            }}\n                            labelPosition={0}\n                        />\n                        <div className=\"flex flex-row grid-gap\" style={{ justifyContent: \"space-evenly\" }}>\n                            {this.renderDetail(H5, \"Passed\", { text: this.props.selectedSpec.state.passed, style: { marginLeft: \"auto\", marginRight: \"auto\" } })}\n                            {this.renderDetail(H5, \"Skipped\", { text: this.props.selectedSpec.state.skipped, style: { marginLeft: \"auto\", marginRight: \"auto\" } })}\n                            {this.renderDetail(H5, \"Failed\", { text: this.props.selectedSpec.state.failed, style: { marginLeft: \"auto\", marginRight: \"auto\" } })}\n                        </div>\n                    </div>\n                </div>\n\n                {(this.props.selectedSpec.description || this.props.selectedSpec.acceptanceCriteria) &&\n                    <div className=\"flex flex-column grid-gap\">\n                        <Divider />\n                        {this.props.selectedSpec.description && this.renderDetail(H3, \"Description\", { text: this.props.selectedSpec.description })}\n                        {this.props.selectedSpec.acceptanceCriteria && this.renderDetail(H3, \"Acceptance Criteria\", { text: this.props.selectedSpec.acceptanceCriteria })}\n                    </div>\n                }\n\n                <div className=\"flex flex-column\">\n                    <Divider />\n                    {this.renderDetail(H3, \"Steps\", { text: \"\" })}\n                    {this.renderSteps(this.props.selectedSpec.suites, 0)}\n                </div>\n\n            </div>\n        }\n\n        return view\n    }\n\n\n\n    private determineIcon(collection: IconCollection, matcher: string, fallback: IconDefinition): IconDefinition {\n        return collection[matcher] || fallback\n    }\n\n    private renderTags(): JSX.Element | undefined {\n        if (!this.props.selectedSpec.tags) return undefined;\n        return <div className=\"flex flex-row grid-gap-half\" style={{ marginBottom: \"1rem\" }}>\n            {this.props.selectedSpec.tags.map((tag: string) => <Tag key={tag} round={true}>{tag}</Tag>)}\n        </div>\n    }\n\n    private renderDetail(H: React.FunctionComponent, title: string, text: { text: string, style?: React.CSSProperties | undefined }, icon?: IconDefinition): JSX.Element {\n        return <div className=\"flex flex-column\">\n            <H>{title}</H>\n            <div className=\"flex flex-row grid-gap-half\">\n                {icon && <FontAwesomeIcon icon={icon} size=\"lg\" />}\n                <p className={Classes.RUNNING_TEXT + \" pre-wrap\"} style={text.style}>\n                    {text.text}\n                </p>\n            </div>\n        </div>\n    }\n    \n    private renderSteps(array: any[], depth: number): JSX.Element[] {\n        console.log(\"recursive loop\")\n        return array.map((item: any) => {\n\n            let tests: JSX.Element[] = []\n            let childSuites: JSX.Element[] = []\n            let hooks: JSX.Element[] = []\n            let view: JSX.Element[] = []\n\n            if (item.hooks && item.hooks.length > 0) {   \n                hooks = this.filterAndReturnHookElements(\"before all\", item.hooks, item, depth+1)\n                \n                view = [...view, ...hooks]\n            }\n            if (item.suites && item.suites.length > 0) {\n                childSuites = this.renderSteps(item.suites, depth+1)\n                view = [...view, ...childSuites]\n            }\n            if (item.tests && item.tests.length > 0) {\n                tests = item.tests.map((test: any) => {\n                    return [\n                        this.filterAndReturnHookElements(\"before each\", item.hooks, test, depth+1),\n                        this.generateTestElement(test, depth+1),\n                        this.filterAndReturnHookElements(\"after each\", item.hooks, test, depth+1),\n                    ]\n                })\n                view = [...view, ...tests]\n            }\n            if (item.hooks && item.hooks.length > 0) {   \n                hooks = this.filterAndReturnHookElements(\"after all\", item.hooks, item, depth+1)\n                \n                view = [...view, ...hooks]\n            }\n\n            return this.generateSuiteElement(item, view, depth)\n        })\n    }\n\n    private filterAndReturnHookElements(type: string, hooks: any, item: any, depth: number): JSX.Element[] {\n        return hooks.filter((hook: any) => {\n            return hook.type == type && ((hook.associatedTest === \"*\" && hook.associatedSuite === item.name) || hook.associatedTest === item.name)\n        })\n        .map((hook: any) => {\n            const hookSteps = hook.steps.map((step: any) => {\n                return this.generateStepElement(step, depth+1)\n            })\n            return this.generateHookElement(hook, hookSteps, depth)\n        })\n    }\n\n    private generateSuiteElement(suite: any, children: JSX.Element[], depth: number): JSX.Element {\n        return <div className=\"flex flex-column suite\">\n            {this.renderDivider(suite.state)}\n            <div className=\"flex flex-row grid-gap-half\">\n                {this.renderTimeLine(suite.state)}\n                {this.renderIndents(depth)}\n                <span className=\"heading-middle\" style={{fontWeight: \"bold\"}}>{suite.name}</span>\n            </div>\n            {children}\n            {this.renderDivider(suite.state)}\n        </div>\n    }\n\n    private renderIcon(state: string): JSX.Element {\n        switch(state) {\n            case \"passed\": \n                return <Icon icon=\"tick\" color={resultColour[state]} style={{marginTop: \"auto\", marginBottom: \"auto\", paddingTop:\"1px\"}} />\n            case \"failed\": \n                return <Icon icon=\"cross\" color={resultColour[state]} style={{marginTop: \"auto\", marginBottom: \"auto\", paddingTop:\"1px\"}} />\n            case \"skipped\":\n                return <Icon icon=\"double-chevron-right\" color={resultColour[state]} style={{marginTop: \"auto\", marginBottom: \"auto\", paddingTop:\"1px\"}} />\n            case \"description\":\n                return <Icon icon=\"manually-entered-data\" style={{marginTop: \"auto\", marginBottom: \"auto\", paddingTop:\"1px\"}} />\n            case \"expectation\":\n                return <Icon icon=\"search-template\" style={{marginTop: \"auto\", marginBottom: \"auto\", paddingTop:\"1px\"}} />\n            case \"screenshot\":\n                return <Icon icon=\"media\" style={{marginTop: \"auto\", marginBottom: \"auto\", paddingTop:\"1px\"}} />\n            case \"timer\":\n                return <Icon icon=\"stopwatch\" style={{marginTop: \"auto\", marginBottom: \"auto\", paddingTop:\"1px\"}} />\n            case \"bug\":\n                return <Icon icon=\"console\" color={resultColour[\"failed\"]} style={{marginTop: \"auto\", marginBottom: \"auto\", paddingTop:\"1px\"}} />\n            default: \n                return <Icon icon=\"double-chevron-right\" color=\"#5c7080\" style={{marginTop: \"auto\", marginBottom: \"auto\", paddingTop:\"1px\"}} />\n        }\n    }\n\n    private generateTestElement(test: any, depth: number): JSX.Element {\n        \n        const steps = test.steps.map((step: any, index: number) => {\n            if (index > 0) {\n                return [this.renderNestedDivider(depth+1), this.generateStepElement(step, depth+1)]\n            } else {\n                return this.generateStepElement(step, depth+1)\n            }\n        })\n        \n        return <div className=\"flex flex-column test\">\n            {this.renderDivider(test.state)}\n            <div className=\"flex flex-row grid-gap-half\">\n                {this.renderTimeLine(test.state)}\n                {this.renderIndents(depth)}\n                {this.renderIcon(test.state)}\n                <span style={{fontWeight: \"bold\"}} className=\"heading-middle flex flex-grow testname\">{test.name} ({test.duration}ms)</span>\n            </div>\n            {steps}\n            {this.renderDivider(test.state)}\n        </div>\n    }\n\n    private generateStepElement(step: any, depth: number): JSX.Element {\n        return <div className=\"flex flex-column step\">\n            {this.renderDivider(step.state)}\n            <div className=\"flex flex-row grid-gap-half step\">\n                {this.renderTimeLine(step.state)}\n                {this.renderIndents(depth)}\n                <div className=\"flex flex-column flex-grow step\">\n                    <div className=\"flex flex-row grid-gap-half\">\n                        {this.renderIcon(\"description\")}\n                        <span className=\"heading-middle flex flex-grow\">{step.description}</span>\n                    </div>\n                    <div className=\"flex flex-row grid-gap-half\">\n                        {this.renderIcon(\"expectation\")}\n                        <span className=\"heading-middle flex flex-grow\">{step.expectation}</span>\n                    </div>\n                    <div className=\"flex flex-row grid-gap-half\">\n                        {this.renderIcon(step.state)}\n                        <span className=\"heading-middle flex flex-grow\">{step.actual}</span>\n                    </div>\n                </div>\n                {step.error && this.renderStackTrace(step.error)}\n                {step.error && <Divider/>}\n                {step.screenshotPath && this.renderScreenshot(step.screenshotPath)}\n            </div>\n            {this.renderDivider(step.state)}\n        </div>\n    }\n\n    private generateHookElement(hook: any, children: JSX.Element[], depth: number): JSX.Element {\n        return <div className=\"flex flex-column hook\">\n            {this.renderDivider(hook.state)}\n            <div className=\"flex flex-row grid-gap-half\">\n                {this.renderTimeLine(hook.state)}\n                {this.renderIndents(depth)}\n                <span className=\"heading-middle\" style={{fontWeight: \"bold\"}}>{hook.type}</span>\n            </div>\n            {children}\n            {this.renderDivider(hook.state)}\n        </div>\n    }\n\n    private renderIndents(depth: number): JSX.Element[] {\n        return Array.from({length: depth}).map(() => {\n            return <div className=\"indent\" style={{marginLeft: \"1rem\"}}></div>\n        }); \n    }\n\n    private renderTimeLine(state: string): JSX.Element {\n        const colour = resultColour[state] || Colours.green\n        return <div style={{width:\"0.3rem\", height:\"auto\", backgroundColor: colour}} />\n\n    }\n\n    private renderDivider(state: string): JSX.Element {\n        const colour = resultColour[state] || Colours.green\n        return <div style={{width:\"0.3rem\", height:\"0.5rem\", backgroundColor: colour}}></div>\n    }\n\n    private renderNestedDivider(depth: number): JSX.Element {\n        return <div className=\"flex flex-row grid-gap-half\">\n            <div style={{width:\"3px\", height:\"auto\"}}></div>\n            {this.renderIndents(depth)}\n            <div className=\"flex-grow\" style={{height:\"1px\", background: \"rgba(16, 22, 26, 0.15)\"}}></div>\n        </div>\n        \n    }\n\n    private renderStackTrace(error: any): JSX.Element {\n        return <Popover className=\"flex flex-row grid-gap-half step\" position={Position.LEFT} content={\n                <div className={Classes.CARD + \" pre-wrap flex flex-column\"}>\n                    <H5>Error: {error.name}</H5>\n                    <p>Message: {error.message}</p>\n                    <p>Expected: {error.expected.toString()}</p>\n                    <p>Actual: {error.actual.toString()}</p>\n                    <p>Operator: {error.operator}</p>\n                    <p>{error.stack.toString()}</p>\n                </div>\n            }>\n            <Icon icon=\"console\" className=\"icon-calc-middle\" color={resultColour[\"failed\"]} style={{paddingTop:\"1px\", cursor: \"pointer\"}} />\n        </Popover>       \n    }\n\n    private renderScreenshot(screenshotPath: string): JSX.Element {\n        return <div className=\"flex flex-row grid-gap-half step\" onClick={()=> window.open(`http://localhost:8080/${screenshotPath}`, \"_blank\")} style={{cursor: \"pointer\"}}>\n            {this.renderIcon(\"screenshot\")}\n        </div>\n    }\n\n    private noSpecSelected() {\n        return <NonIdealState\n            className=\"tab\"\n            icon=\"help\"\n            title=\"Select a spec\"\n            description={\"Select a spec from the menu to start viewing reports\"}\n        />\n    }\n\n    private calculateTotalTime(): string {\n\n        const unixStartTime = Date.parse(this.props.selectedSpec.start)\n        const unixEndTime = Date.parse(this.props.selectedSpec.end)\n        const unixDifference = unixEndTime - unixStartTime\n\n        let seconds: any = parseInt((unixDifference / 1000).toFixed(0))\n        let minutes: any = Math.floor(seconds / 60)\n        let hours: any = 0\n\n        if (minutes > 59) {\n            hours = Math.floor(minutes / 60)\n            minutes = minutes - (hours * 60)\n        }\n\n        seconds = Math.floor(seconds % 60)\n\n        return `${hours}h ${minutes}m ${seconds}s`\n    }\n\n}","import React from 'react';\n\nimport './Dashboard.css';\nimport { SpecTree } from './SpecTree';\nimport { SpecView } from './SpecView';\n\ninterface IAppProps {\n    selectedBuild: string | undefined\n}\n\ninterface IAppState {\n    selectedSpec: any | undefined\n}\n\nexport class Dashboard extends React.Component<IAppProps, IAppState> {\n\n    public state: IAppState = { selectedSpec: undefined }\n    \n    public render() {\n        return (\n            <div id=\"dashboard\" className=\"flex flex-grow flex-row\">\n                <SpecTree selectedBuild={this.props.selectedBuild} selectedSpec={this.selectedSpec} />\n                <SpecView selectedSpec={this.state.selectedSpec}/>\n            </div>\n        );\n    }\n\n    selectedSpec = (selectedSpec: any) => {\n        this.setState({selectedSpec: selectedSpec})\n    }\n\n}","import React from 'react';\nimport './App.css';\nimport { Header } from './components/Header';\nimport { Dashboard } from './components/Dashboard';\n\ninterface IAppProps {\n\n}\n\ninterface IAppState {\n    selectedBuild: string | undefined\n}\n\nexport class App extends React.Component<IAppProps, IAppProps> {\n\n    public state: IAppState = { selectedBuild: undefined }\n\n    public render() {\n        return (\n            <div id=\"app\" className=\"flex flex-column\">\n                <Header selectedBuild={this.selectedBuild}/>\n                <Dashboard selectedBuild={this.state.selectedBuild}/>\n            </div>\n        );\n    }\n\n    selectedBuild = (selectedBuild: string) => {\n        this.setState({selectedBuild: selectedBuild})\n    }\n\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\nimport reportWebVitals from './reportWebVitals';\nimport \"@blueprintjs/core/lib/css/blueprint.css\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}