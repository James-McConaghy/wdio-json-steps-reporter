{"version":3,"sources":["components/Colours.tsx","components/Settings.tsx","components/Header.tsx","components/PercentageBar.tsx","components/SpecTree.tsx","components/SpecView.tsx","components/Dashboard.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Colours","resultColour","green","yellow","red","Settings","state","isOpen","showHooks","showEmptyHooks","depth","handleShowEmptyHooks","handleBooleanChange","bool","setState","handleDepth","handleOpen","localStorage","getItem","handleSettingSaved","saveSettings","handleClose","className","icon","onClick","this","title","onClose","usePortal","Classes","DIALOG_BODY","alignIndicator","Alignment","RIGHT","checked","label","onChange","e","handleShowHooks","disabled","DIALOG_FOOTER","DIALOG_FOOTER_ACTIONS","fill","style","backgroundColor","backgroundImage","event","target","handler","setItem","settings","props","React","Header","builds","selected","value","a","fetchData","fetch","response","json","body","selectedBuild","id","Group","align","LEFT","Heading","options","selectBuild","Divider","saveSetting","PercentageBar","data","undefined","showZeroValues","view","forEach","percentageBarSegment","segment","createSegment","push","flexGrow","colour","Component","SpecTree","selectedSpec","treeNodeInfo","filter","percentageBarData","handleNodeClick","nodeData","_nodePath","originallySelected","isSelected","shiftKey","forEachNode","n","handleNodeCollapse","isExpanded","handleNodeExpand","hasResults","length","noSearchResults","noBuildSelected","type","leftIcon","placeholder","rightElement","minimal","nodes","callback","node","childNodes","description","contents","onNodeClick","onNodeCollapse","onNodeExpand","ELEVATION_0","build","prevProps","prevState","buildTreeNodeInfo","createPercentageBarData","passed","skipped","failed","testDirectory","testDir","results","result","sessionId","capabilities","relativePath","specs","substring","lastIndexOf","folderHierarchy","split","file","pop","includes","createTreeNodeInfo","remainingFolderHierarchy","currentTreeNodeInfo","remainingFolder","index","desiredTreeNodeInfo","find","nestedTreeNodeInfo","appendTreeNodeInfo","newTreeNodeInfo","secondaryLabel","renderTestDots","sort","sortTreeNodeInfo","states","map","color","marginTop","marginBottom","treeNodeInfoA","treeNodeInfoB","browsers","faChrome","faEdge","faFirefoxBrowser","faOpera","faSafari","platforms","faLinux","faApple","faWindows","SpecView","storedSettings","displayDetails","noSpecSelected","renderDetail","H3","text","flexBasis","renderTags","H5","platformName","determineIcon","browserName","start","end","calculateTotalTime","textAlign","radius","animate","lineWidth","height","parseInt","dataEntry","Math","round","percentage","labelPosition","justifyContent","marginLeft","marginRight","acceptanceCriteria","renderSteps","suites","collection","matcher","fallback","tags","tag","H","size","RUNNING_TEXT","array","item","tests","childSuites","hooks","filterAndReturnHookElements","test","generateTestElement","generateSuiteElement","hook","associatedTest","associatedSuite","name","hookSteps","steps","step","generateStepElement","generateHookElement","suite","children","renderDivider","renderTimeLine","renderIndents","renderIcon","fontWeight","paddingTop","renderNestedDivider","duration","expectation","actual","error","renderStackTrace","screenshotPath","renderScreenshot","Array","from","width","background","position","Position","content","CARD","message","expected","toString","operator","stack","window","open","cursor","unixStartTime","Date","parse","unixEndTime","seconds","toFixed","minutes","floor","hours","Dashboard","storedSetting","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.02398b8b.chunk.js","sourcesContent":["export enum Colours {\n    green = \"#BECF6B\",\n    yellow = \"#FED478\",\n    red = \"#D57E7E\"\n}\n\nexport const resultColour: ColourCollection = {\n    \"passed\": Colours.green,\n    \"skipped\": Colours.yellow,\n    \"failed\": Colours.red,\n    \"failed skipped\": Colours.yellow,\n    \"passed skipped\": Colours.yellow,\n}\n\nexport interface ColourCollection {\n    [key: string]: Colours;\n}","import * as React from \"react\";\nimport {\n    Alignment,\n    Switch,\n    Checkbox,\n    Button,\n    Classes,\n    Dialog\n} from \"@blueprintjs/core\";\n\nimport { Colours } from \"./Colours\";\n\nexport interface ISettingsState {\n    isOpen: boolean,\n    showHooks: boolean,\n    showEmptyHooks: boolean,\n    depth: boolean\n}\n\ninterface ISettingsProps {\n    saveSettings: Function\n}\n\nexport interface StoredSettings {\n    showHooks: boolean,\n    showEmptyHooks: boolean,\n    depth: boolean\n}\n\nexport class Settings extends React.Component<ISettingsProps, ISettingsState> {\n\n    public state: ISettingsState = {\n        isOpen: false, \n        showHooks: false,\n        showEmptyHooks: false,\n        depth: true\n    };\n        \n    public render() {\n        return (\n            <div>\n                <Button className=\"bp3-minimal\" icon=\"cog\" onClick={this.handleOpen} />\n                <Dialog title=\"Settings\" onClose={this.handleClose} usePortal={true} {...this.state} >\n                    <div className={Classes.DIALOG_BODY}>\n                        <p>\n                            <Switch alignIndicator={Alignment.RIGHT} checked={this.state.depth} label=\"Depth\" onChange={this.handleDepth} />\n                        </p>\n                        <br />\n                        <br />\n                        <p>\n                            <Switch alignIndicator={Alignment.RIGHT} checked={this.state.showHooks} label=\"Show Hooks\" onChange={(e) => this.handleShowHooks(e)} />\n                            <Checkbox alignIndicator={Alignment.RIGHT} checked={this.state.showEmptyHooks} disabled={!this.state.showHooks} label=\"Show Empty Hooks\" onChange={this.handleShowEmptyHooks}/>\n                        </p>\n                        <br />\n                        <br />\n                        <div className={Classes.DIALOG_FOOTER}>\n                            <div className={Classes.DIALOG_FOOTER_ACTIONS}>\n                                <Button fill={true} style={{backgroundColor: Colours.green, backgroundImage: \"none\"}} onClick={this.handleSettingSaved}>\n                                    Save\n                                </Button>\n                            </div>\n                        </div>\n                    </div>\n                </Dialog>\n            </div>\n        );\n    }\n\n   \n\n\n    private handleShowHooks(event: React.FormEvent<HTMLElement>) {\n        const bool = (event.target as HTMLInputElement).checked\n\n        if (bool)\n            this.setState({ showHooks: bool});   \n        else \n            this.setState({ showHooks: bool, showEmptyHooks: bool}); \n\n    }\n\n    private handleShowEmptyHooks = this.handleBooleanChange(bool => this.setState({ showEmptyHooks: bool }));\n\n    private handleDepth = this.handleBooleanChange(bool => this.setState({ depth: bool }));\n\n    handleBooleanChange(handler: (checked: boolean) => void) {\n        return (event: React.FormEvent<HTMLElement>) => handler((event.target as HTMLInputElement).checked);\n    }\n\n    private handleOpen = () => {\n        this.setState({ \n            isOpen: true,\n            depth: localStorage.getItem('depth') === \"on\" ? true : false,\n            showHooks: localStorage.getItem('showHooks') === \"on\" ? true : false,\n            showEmptyHooks: localStorage.getItem('showEmptyHooks') === \"on\" ? true : false\n        })\n    }\n\n    private handleSettingSaved = () => { \n        this.setState({ isOpen: false })\n        this.saveSettings()\n    }\n\n    private saveSettings() {\n\n        localStorage.setItem('depth', this.state.depth ? \"on\": \"off\");\n        localStorage.setItem('showHooks', this.state.showHooks ? \"on\": \"off\");\n        localStorage.setItem('showEmptyHooks', this.state.showEmptyHooks ? \"on\": \"off\");\n        \n        const settings: StoredSettings = {\n            showHooks: this.state.showHooks,\n            showEmptyHooks: this.state.showEmptyHooks,\n            depth: this.state.depth\n        }\n\n        this.props.saveSettings(settings)\n    }\n    \n    private handleClose = () => this.setState({ isOpen: false });\n\n}","import * as React from \"react\";\n\nimport {\n    HTMLSelect,\n    Alignment,\n    Navbar\n} from \"@blueprintjs/core\";\n\n\nimport './Header.css';\nimport { Settings } from \"./Settings\";\n\nexport interface IHeaderState {\n    builds: any[]\n}\n\ninterface IHeaderProps {\n    selectedBuild: Function\n    saveSetting: Function\n}\n\nexport class Header extends React.Component<IHeaderProps, IHeaderState> {\n\n    public state: IHeaderState = { builds: [{selected: true, disabled: true, value: \"Please select a build\"}] };\n    \n\n    async componentDidMount() {\n        await this.fetchData();\n    }\n\n    private async fetchData() {\n        const response = await fetch('/builds');\n        const body = await response.json();\n\n        this.setState({builds: [...this.state.builds, ...body.builds]})\n    }\n\n    private selectBuild(event: React.ChangeEvent<HTMLSelectElement>) {\n        this.props.selectedBuild(event.target.value)\n    }\n    \n    public render() {\n        return (\n            <div>\n                <Navbar id=\"header\" className=\"header\">\n                    <Navbar.Group align={Alignment.LEFT}>\n                        <Navbar.Heading>Report</Navbar.Heading>\n                    </Navbar.Group>\n                    <Navbar.Group align={Alignment.RIGHT}>\n                        <HTMLSelect options={this.state.builds} onChange={e => this.selectBuild(e)} />\n                        <Navbar.Divider />\n                        <Settings saveSettings={this.props.saveSetting}/>\n                    </Navbar.Group>\n                </Navbar>\n            </div>\n        );\n    }\n\n}","import React from 'react';\n\nimport './PercentageBar.css';\nimport { Colours } from \"./Colours\";\n\nexport interface PercentageBarSegment {\n    label: string\n    value: number\n    colour: Colours\n}\n\ninterface IPercentageBarProps {\n    data: PercentageBarSegment[] | undefined\n    showZeroValues?: boolean\n}\n\ninterface IPercentageBarState {\n    data: PercentageBarSegment[] | undefined\n}\n\nexport class PercentageBar extends React.Component<IPercentageBarProps, IPercentageBarState> {\n    \n    public props: IPercentageBarProps = { data: undefined, showZeroValues: false }\n    public state: IPercentageBarState = { data: undefined }\n\n    public render() {\n\n        const view: JSX.Element[] = []\n        this.state.data?.forEach(percentageBarSegment => {\n            if (percentageBarSegment.value !== 0 || this.props.showZeroValues) {\n                const segment = this.createSegment(percentageBarSegment)\n                view.push(segment)\n            }\n        })\n\n        return (\n            <div className=\"flex small-rounded\">\n                {view}\n            </div>    \n        );\n    }\n\n    private createSegment(percentageBarSegment: PercentageBarSegment): JSX.Element {\n        return <div className=\"percentageBarSegment\" style={{\n            flexGrow: percentageBarSegment.value,\n            backgroundColor: percentageBarSegment.colour\n        }}>{percentageBarSegment.label}</div>\n    }\n\n    static getDerivedStateFromProps(props: IPercentageBarProps, state: IPercentageBarState) {\n        if (state.data !== props.data) {\n            return {\n                data: props.data\n            }\n        }\n        return null\n    }\n\n}","import * as React from \"react\";\nimport './SpecTree.css';\n\nimport {\n    Button,\n    Classes,\n    Icon,\n    InputGroup,\n    NonIdealState,\n    TreeNodeInfo,\n    Tree\n} from \"@blueprintjs/core\";\nimport { PercentageBar, PercentageBarSegment } from \"./PercentageBar\";\nimport { Colours, resultColour } from \"./Colours\";\n\nexport interface ISpecTreeState {\n    selectedBuild: string | undefined;\n    data: any | undefined;\n    treeNodeInfo: TreeNodeInfo[];\n    filter: string;\n    percentageBarData: PercentageBarSegment[]\n}\n\nexport interface ISpecTreeProps {\n    selectedBuild: string | undefined\n    selectedSpec: Function | undefined\n}\n\n// use Component so it re-renders everytime: `nodes` are not a primitive type\n// and therefore aren't included in shallow prop comparison\nexport class SpecTree extends React.Component<ISpecTreeProps, ISpecTreeState> {\n\n    public props: ISpecTreeProps = { selectedBuild: undefined, selectedSpec: undefined }\n    public state: ISpecTreeState = { \n        selectedBuild: undefined, \n        data: undefined, \n        treeNodeInfo: [], \n        filter: \"\", \n        percentageBarData: [\n            { label: \"\", value: 1, colour: Colours.green }\n        ]\n    };\n\n    public render() {\n\n        let view\n\n        if (this.state.treeNodeInfo !== undefined) {\n            view = this.hasResults()\n        }\n        if (this.state.treeNodeInfo.length === 0) {\n            view = this.noSearchResults()\n        } \n        if (this.props.selectedBuild === undefined || this.state.data === undefined || this.state.treeNodeInfo === undefined) {\n            view = this.noBuildSelected()\n        }\n\n        return (\n            <div id=\"specTree\" className=\"flex flex-column grid-gap\">\n                <PercentageBar data={this.state.percentageBarData} />\n                <InputGroup \n                    type=\"text\"\n                    leftIcon=\"search\"\n                    placeholder=\"Filter..\"\n                    onChange={e => this.setState({filter: e.target.value})}\n                    rightElement={<Button icon=\"chevron-right\" minimal={true} />}\n                />\n                {view}\n            </div>\n        )\n    }\n\n    private handleNodeClick = (\n        nodeData: TreeNodeInfo,\n        _nodePath: number[],\n        e: React.MouseEvent<HTMLElement>\n    ) => {\n        const originallySelected = nodeData.isSelected;\n        if (!e.shiftKey) {\n            this.forEachNode(this.state.treeNodeInfo, (n) => (n.isSelected = false));\n        }\n        nodeData.isSelected =\n            originallySelected == null ? true : !originallySelected;\n        this.setState(this.state);\n        this.props.selectedSpec!(nodeData.nodeData)\n    };\n\n    private handleNodeCollapse = (nodeData: TreeNodeInfo) => {\n        nodeData.isExpanded = false;\n        this.setState(this.state);\n    };\n\n    private handleNodeExpand = (nodeData: TreeNodeInfo) => {\n        nodeData.isExpanded = true;\n        this.setState(this.state);\n    };\n\n    private forEachNode(nodes: TreeNodeInfo[], callback: (node: TreeNodeInfo) => void) {\n        if (nodes == null) {\n            return;\n        }\n\n        for (const node of nodes) {\n            callback(node);\n            node.childNodes && this.forEachNode(node.childNodes, callback)\n        }\n    }\n\n    private noBuildSelected() {\n        return <NonIdealState className=\"flex-grow\"\n            icon=\"help\"\n            title=\"Select a build\"\n            description={\"Select a build from the dropdown to start viewing reports\"}\n        />\n    };\n\n    private noSearchResults() {\n        return <NonIdealState className=\"flex-grow\"\n            icon=\"search\"\n            title=\"No specs found\"\n            description=\"Please update your filters\"\n        />\n    };\n\n    private hasResults() {\n        return <Tree\n            contents={this.state.treeNodeInfo}\n            onNodeClick={this.handleNodeClick}\n            onNodeCollapse={this.handleNodeCollapse}\n            onNodeExpand={this.handleNodeExpand}\n            className={Classes.ELEVATION_0} \n        />\n    };\n\n    private async fetchData(build: string) {\n        const response = await fetch(`/builds/${build!}`);\n        const body = await response.json();\n        this.setState({data: body})\n    }\n\n    static getDerivedStateFromProps(props: ISpecTreeProps, state: ISpecTreeState) {\n        if (state.selectedBuild !== props.selectedBuild) {\n            return {\n                selectedBuild: props.selectedBuild\n            }\n        }\n        return null\n    }\n\n    async componentDidUpdate(prevProps: ISpecTreeProps, prevState: ISpecTreeState) {\n        if (this.state.selectedBuild !== prevState.selectedBuild) { // new build selected\n            await this.fetchData(this.props.selectedBuild!)\n        }\n        if (\n            (this.state.data !== prevState.data) ||                                   // new build has completed loading from api OR\n            (this.state.filter !== prevState.filter && this.state.data !== undefined) // filter text has changed and data has already been loaded\n        ) {\n            await this.buildTreeNodeInfo()\n            await this.createPercentageBarData()\n        }\n    }\n\n    private async createPercentageBarData() {\n        const data = [\n            { label: this.state.data.passed, value: this.state.data.passed, colour: Colours.green },\n            { label: this.state.data.skipped, value: this.state.data.skipped, colour: Colours.yellow },\n            { label: this.state.data.failed, value: this.state.data.failed, colour: Colours.red }\n        ]\n\n        this.setState({percentageBarData: data})\n    }\n\n    private async buildTreeNodeInfo() {        \n        const testDirectory = this.state.data.testDir\n        const treeNodeInfo: TreeNodeInfo[] = []\n        const results = this.state.data.results\n\n        for (const result of results) {\n                                          \n            const sessionId = result.capabilities.sessionId\n            const relativePath = result.specs[0].substring(result.specs[0].lastIndexOf(testDirectory) + testDirectory.length)\n            const folderHierarchy = relativePath.split(\"/\")\n            const file = folderHierarchy.pop() \n            \n            if (relativePath.includes(this.state.filter)) {\n                this.createTreeNodeInfo(sessionId, folderHierarchy, file, result, treeNodeInfo)\n            }\n        };\n\n        this.setState({treeNodeInfo: treeNodeInfo})\n    }\n\n    private createTreeNodeInfo(sessionId: string, remainingFolderHierarchy: string[], file: string, result: any, currentTreeNodeInfo: TreeNodeInfo[]) {\n\n        // build directories\n        remainingFolderHierarchy.forEach((remainingFolder, index) => {\n\n            let desiredTreeNodeInfo = currentTreeNodeInfo.find(nestedTreeNodeInfo => nestedTreeNodeInfo.label === remainingFolder)\n\n            if (!desiredTreeNodeInfo) {\n                const createdDesiredTreeNodeInfo = this.appendTreeNodeInfo(currentTreeNodeInfo, \"FOLDER\", index, remainingFolder, undefined)\n                desiredTreeNodeInfo = createdDesiredTreeNodeInfo\n            }\n\n            currentTreeNodeInfo = desiredTreeNodeInfo.childNodes!\n        })\n\n        // finally add the spec\n        this.appendTreeNodeInfo(currentTreeNodeInfo, \"SPEC\", sessionId, file, result)\n    }\n\n    private appendTreeNodeInfo(currentTreeNodeInfo: TreeNodeInfo[], type: \"SPEC\" | \"FOLDER\", id: string | number, label: string, data: any): TreeNodeInfo {\n        let newTreeNodeInfo: TreeNodeInfo\n        switch(type) {\n            case \"FOLDER\":\n                newTreeNodeInfo = {\n                    id: `${id}-${label}`,\n                    icon: \"folder-close\",\n                    label: label,\n                    childNodes: [],\n                }\n                break\n            case \"SPEC\":\n                newTreeNodeInfo = {\n                    id: id,\n                    icon: \"document\",\n                    label: label,\n                    secondaryLabel: this.renderTestDots(data.state.state),\n                    nodeData: data\n                }\n                break \n        }\n        currentTreeNodeInfo.push(newTreeNodeInfo)\n        currentTreeNodeInfo.sort(this.sortTreeNodeInfo())\n\n        return newTreeNodeInfo\n    }\n\n    private renderTestDots(states: string[]): JSX.Element {\n        return <div> {\n            states.map(state => {\n                return <Icon icon=\"dot\" color={resultColour[state]} style={{marginTop: \"auto\", marginBottom: \"auto\"}} />\n            })\n        }\n        </div>\n    }\n\n    private sortTreeNodeInfo() {\n        return function(treeNodeInfoA: TreeNodeInfo, treeNodeInfoB: TreeNodeInfo) {\n            if (treeNodeInfoA.icon === treeNodeInfoB.icon) {\n                if (treeNodeInfoB.label! < treeNodeInfoA.label!) {\n                    return 1\n                } else {\n                    return 0\n                }\n            } else if (treeNodeInfoA.icon! > treeNodeInfoB.icon!) {\n                return 0;\n            } else if (treeNodeInfoA.icon! < treeNodeInfoB.icon!) {\n                return 1;\n            }\n            return 0\n        }\n    }   \n\n}\n","import * as React from \"react\";\nimport './SpecView.css';\n\nimport {\n    Classes,\n    Divider,\n    NonIdealState,\n    H3, H5, Icon,\n    Tag,\n    Position,\n    Popover\n} from \"@blueprintjs/core\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faChrome, faFirefoxBrowser, faOpera, faSafari, faApple, faLinux, faWindows, faEdge, IconDefinition } from '@fortawesome/free-brands-svg-icons'\nimport { PieChart } from 'react-minimal-pie-chart';\nimport { Colours, resultColour } from \"./Colours\";\nimport { StoredSettings } from \"./Settings\";\n\n\ninterface ISpecViewProps {\n    selectedSpec: any | undefined\n    storedSettings: StoredSettings | undefined\n}\n\ninterface ISpecViewState {\n    storedSettings: any | undefined\n}\n\ninterface IconCollection {\n    [key: string]: IconDefinition;\n}\n\nconst browsers: IconCollection = {\n    \"chrome\": faChrome,\n    \"edge\": faEdge,\n    \"firefox\": faFirefoxBrowser,\n    \"opera\": faOpera,\n    \"safari\": faSafari,\n}\n\nconst platforms = {\n    \"linux\": faLinux,\n    \"mac os x\": faApple,\n    \"windows\": faWindows,\n}\n\nexport class SpecView extends React.Component<ISpecViewProps> {\n\n    public props: ISpecViewProps = { selectedSpec: undefined, storedSettings: undefined }\n    public state: ISpecViewState = { storedSettings: undefined }\n\n    static getDerivedStateFromProps(props: ISpecViewProps, state: ISpecViewState) {\n        if (state.storedSettings !== props.storedSettings) {\n            return {\n                storedSettings: props.storedSettings\n            }\n        }\n        return null\n    }\n\n    public render() {\n        return (\n            <div id=\"specView\" className=\"flex flex-grow flex-column\">\n                {this.displayDetails()}\n            </div>\n        )\n    }\n\n    private displayDetails(): JSX.Element {\n\n        let view;\n        if (this.props.selectedSpec === undefined) {\n            view = this.noSpecSelected()\n        } else {\n            view = <div className=\"flex flex-column\">\n                {this.renderDetail(H3, this.props.selectedSpec.specs[0].split(\"/\").pop(), { text: \"\" })}\n                <div className=\"flex flex-row grid-gap\">\n                    <div className=\"flex flex-column flex-grow\" style={{ flexBasis: \"30rem\" }}>\n                        {this.renderTags()}\n                        <div className=\"flex flex-row grid-gap\">\n                            {this.renderDetail(H5, \"Platform\", { text: this.props.selectedSpec.capabilities.platformName }, this.determineIcon(platforms, this.props.selectedSpec.capabilities.platformName, faLinux))}\n                            {this.renderDetail(H5, \"Browser\", { text: this.props.selectedSpec.capabilities.browserName }, this.determineIcon(browsers, this.props.selectedSpec.capabilities.browserName, faChrome))}\n                        </div>\n                        {this.renderDetail(H5, \"Start Time\", { text: this.props.selectedSpec.start })}\n                        {this.renderDetail(H5, \"End Time\", { text: this.props.selectedSpec.end })}\n                        {this.renderDetail(H5, \"Total Time\", { text: this.calculateTotalTime() })}\n                        {this.renderDetail(H5, \"Session\", { text: this.props.selectedSpec.capabilities.sessionId })}\n                        {this.renderDetail(H5, \"Filepath\", { text: this.props.selectedSpec.specs[0] })}\n                    </div>\n\n                    <div className=\"flex flex-column grid-gap\" style={{ flexBasis: \"30rem\", textAlign: \"center\" }}>\n\n                        <PieChart radius={50} animate={true} lineWidth={25} style={{ textAlign: \"center\", height: \"15rem\" }}\n                            data={[\n                                { title: 'Passed', value: parseInt(this.props.selectedSpec.state.passed), color: Colours.green },\n                                { title: 'Skipped', value: parseInt(this.props.selectedSpec.state.skipped), color: Colours.yellow },\n                                { title: 'Failed', value: parseInt(this.props.selectedSpec.state.failed), color: Colours.red },\n                            ]}\n                            label={({ dataEntry }) => {\n                                if (dataEntry.title === \"Passed\") {\n                                    return Math.round(dataEntry.percentage) + '%'\n                                }\n                            }}\n                            labelPosition={0}\n                        />\n                        <div className=\"flex flex-row grid-gap\" style={{ justifyContent: \"space-evenly\" }}>\n                            {this.renderDetail(H5, \"Passed\", { text: this.props.selectedSpec.state.passed, style: { marginLeft: \"auto\", marginRight: \"auto\" } })}\n                            {this.renderDetail(H5, \"Skipped\", { text: this.props.selectedSpec.state.skipped, style: { marginLeft: \"auto\", marginRight: \"auto\" } })}\n                            {this.renderDetail(H5, \"Failed\", { text: this.props.selectedSpec.state.failed, style: { marginLeft: \"auto\", marginRight: \"auto\" } })}\n                        </div>\n                    </div>\n                </div>\n\n                {(this.props.selectedSpec.description || this.props.selectedSpec.acceptanceCriteria) &&\n                    <div className=\"flex flex-column grid-gap\">\n                        <Divider />\n                        {this.props.selectedSpec.description && this.renderDetail(H3, \"Description\", { text: this.props.selectedSpec.description })}\n                        {this.props.selectedSpec.acceptanceCriteria && this.renderDetail(H3, \"Acceptance Criteria\", { text: this.props.selectedSpec.acceptanceCriteria })}\n                    </div>\n                }\n\n                <div className=\"flex flex-column\">\n                    <Divider />\n                    {this.renderDetail(H3, \"Steps\", { text: \"\" })}\n                    {this.renderSteps(this.props.selectedSpec.suites, 0)}\n                </div>\n\n            </div>\n        }\n\n        return view\n    }\n\n\n\n    private determineIcon(collection: IconCollection, matcher: string, fallback: IconDefinition): IconDefinition {\n        return collection[matcher] || fallback\n    }\n\n    private renderTags(): JSX.Element | undefined {\n        if (!this.props.selectedSpec.tags) return undefined;\n        return <div className=\"flex flex-row grid-gap-half\" style={{ marginBottom: \"1rem\" }}>\n            {this.props.selectedSpec.tags.map((tag: string) => <Tag key={tag} round={true}>{tag}</Tag>)}\n        </div>\n    }\n\n    private renderDetail(H: React.FunctionComponent, title: string, text: { text: string, style?: React.CSSProperties | undefined }, icon?: IconDefinition): JSX.Element {\n        return <div className=\"flex flex-column\">\n            <H>{title}</H>\n            <div className=\"flex flex-row grid-gap-half\">\n                {icon && <FontAwesomeIcon icon={icon} size=\"lg\" />}\n                <p className={Classes.RUNNING_TEXT + \" pre-wrap\"} style={text.style}>\n                    {text.text}\n                </p>\n            </div>\n        </div>\n    }\n    \n    private renderSteps(array: any[], depth: number): JSX.Element[] {\n        return array.map((item: any) => {\n\n            let tests: JSX.Element[] = []\n            let childSuites: JSX.Element[] = []\n            let hooks: JSX.Element[] = []\n            let view: JSX.Element[] = []\n\n            if (item.hooks && item.hooks.length > 0) {   \n                hooks = this.filterAndReturnHookElements(\"before all\", item.hooks, item, depth+1)\n                view = [...view, ...hooks]\n            }\n            if (item.suites && item.suites.length > 0) {\n                childSuites = this.renderSteps(item.suites, depth+1)\n                view = [...view, ...childSuites]\n            }\n            if (item.tests && item.tests.length > 0) {\n                tests = item.tests.map((test: any) => {\n                    return [\n                        this.filterAndReturnHookElements(\"before each\", item.hooks, test, depth+1),\n                        this.generateTestElement(test, depth+1),\n                        this.filterAndReturnHookElements(\"after each\", item.hooks, test, depth+1),\n                    ]\n                })\n                view = [...view, ...tests]\n            }\n            if (item.hooks && item.hooks.length > 0) {   \n                hooks = this.filterAndReturnHookElements(\"after all\", item.hooks, item, depth+1)\n                view = [...view, ...hooks]\n            }\n\n            return this.generateSuiteElement(item, view, depth)\n        })\n    }\n\n    private filterAndReturnHookElements(type: string, hooks: any, item: any, depth: number): JSX.Element[] {        \n        if (this.state.storedSettings.showHooks) {\n            return hooks.filter((hook: any) => {\n                return hook.type === type && ((hook.associatedTest === \"*\" && hook.associatedSuite === item.name) || hook.associatedTest === item.name)\n            })\n            .map((hook: any) => {\n                const hookSteps = hook.steps.map((step: any) => {\n                    return this.generateStepElement(step, depth+1)\n                })\n                return (this.state.storedSettings.showEmptyHooks || hookSteps.length > 0) ? this.generateHookElement(hook, hookSteps, depth) : undefined\n            })\n        }\n        return []\n    }\n\n    private generateSuiteElement(suite: any, children: JSX.Element[], depth: number): JSX.Element {\n        return <div className=\"flex flex-column suite\">\n            {this.renderDivider(suite.state)}\n            <div className=\"flex flex-row grid-gap-half\">\n                {this.renderTimeLine(suite.state)}\n                {this.renderIndents(depth)}\n                {this.renderIcon(\"suite\")}\n                <span className=\"heading-middle\" style={{fontWeight: \"bold\"}}>{suite.name}</span>\n            </div>\n            {children}\n            {this.renderDivider(suite.state)}\n        </div>\n    }\n\n    private renderIcon(state: string): JSX.Element {\n        switch(state) {\n            case \"passed\": \n                return <Icon icon=\"tick\" color={resultColour[state]} style={{marginTop: \"auto\", marginBottom: \"auto\", paddingTop:\"1px\"}} />\n            case \"failed\": \n                return <Icon icon=\"cross\" color={resultColour[state]} style={{marginTop: \"auto\", marginBottom: \"auto\", paddingTop:\"1px\"}} />\n            case \"skipped\":\n                return <Icon icon=\"double-chevron-right\" color={resultColour[state]} style={{marginTop: \"auto\", marginBottom: \"auto\", paddingTop:\"1px\"}} />\n            case \"description\":\n                return <Icon icon=\"manually-entered-data\" style={{marginTop: \"auto\", marginBottom: \"auto\", paddingTop:\"1px\"}} />\n            case \"expectation\":\n                return <Icon icon=\"search-template\" style={{marginTop: \"auto\", marginBottom: \"auto\", paddingTop:\"1px\"}} />\n            case \"screenshot\":\n                return <Icon icon=\"media\" style={{marginTop: \"auto\", marginBottom: \"auto\", paddingTop:\"1px\"}} />\n            case \"timer\":\n                return <Icon icon=\"stopwatch\" style={{marginTop: \"auto\", marginBottom: \"auto\", paddingTop:\"1px\"}} />\n            case \"console\":\n                return <Icon icon=\"console\" color={resultColour[\"failed\"]} style={{marginTop: \"auto\", marginBottom: \"auto\", paddingTop:\"1px\"}} />\n            case \"suite\":\n                return <Icon icon=\"applications\" style={{marginTop: \"auto\", marginBottom: \"auto\", paddingTop:\"1px\"}} />\n            case \"hook\":\n                return <Icon icon=\"flow-end\" style={{marginTop: \"auto\", marginBottom: \"auto\", paddingTop:\"1px\"}} />\n            default: \n                return <Icon icon=\"help\" style={{marginTop: \"auto\", marginBottom: \"auto\", paddingTop:\"1px\"}} />\n        }\n    }\n\n    private generateTestElement(test: any, depth: number): JSX.Element {\n        \n        const steps = test.steps.map((step: any, index: number) => {\n            if (index > 0) {\n                return [this.renderNestedDivider(depth+1), this.generateStepElement(step, depth+1)]\n            } else {\n                return this.generateStepElement(step, depth+1)\n            }\n        })\n        \n        return <div className=\"flex flex-column test\">\n            {this.renderDivider(test.state)}\n            <div className=\"flex flex-row grid-gap-half\">\n                {this.renderTimeLine(test.state)}\n                {this.renderIndents(depth)}\n                {this.renderIcon(test.state)}\n                <span style={{fontWeight: \"bold\"}} className=\"heading-middle flex flex-grow testname\">{test.name} ({test.duration}ms)</span>\n            </div>\n            {steps}\n            {this.renderDivider(test.state)}\n        </div>\n    }\n\n    private generateStepElement(step: any, depth: number): JSX.Element {\n        return <div className=\"flex flex-column step\">\n            {this.renderDivider(step.state)}\n            <div className=\"flex flex-row grid-gap-half step\">\n                {this.renderTimeLine(step.state)}\n                {this.renderIndents(depth)}\n                <div className=\"flex flex-column flex-grow step\">\n                    <div className=\"flex flex-row grid-gap-half\">\n                        {this.renderIcon(\"description\")}\n                        <span className=\"heading-middle flex flex-grow\">{step.description}</span>\n                    </div>\n                    <div className=\"flex flex-row grid-gap-half\">\n                        {this.renderIcon(\"expectation\")}\n                        <span className=\"heading-middle flex flex-grow\">{step.expectation}</span>\n                    </div>\n                    <div className=\"flex flex-row grid-gap-half\">\n                        {this.renderIcon(step.state)}\n                        <span className=\"heading-middle flex flex-grow\">{step.actual}</span>\n                    </div>\n                </div>\n                {step.error && this.renderStackTrace(step.error)}\n                {step.error && <Divider/>}\n                {step.screenshotPath && this.renderScreenshot(step.screenshotPath)}\n            </div>\n            {this.renderDivider(step.state)}\n        </div>\n    }\n\n    private generateHookElement(hook: any, children: JSX.Element[], depth: number): JSX.Element {\n        return <div className=\"flex flex-column hook\">\n            {this.renderDivider(hook.state)}\n            <div className=\"flex flex-row grid-gap-half\">\n                {this.renderTimeLine(hook.state)}\n                {this.renderIndents(depth)}\n                {this.renderIcon(\"hook\")}\n                <span className=\"heading-middle\" style={{fontWeight: \"bold\"}}>{hook.type}</span>\n            </div>\n            {children}\n            {this.renderDivider(hook.state)}\n        </div>\n    }\n\n    private renderIndents(depth: number): JSX.Element[] {\n        if (this.state.storedSettings.depth) {\n            return Array.from({length:  depth}).map(() => {\n                return <div className=\"indent\" style={{marginLeft: \"1rem\"}}></div>\n            }); \n        }\n        return []\n    }\n\n    private renderTimeLine(state: string): JSX.Element {\n        const colour = resultColour[state] || Colours.green\n        return <div style={{width:\"0.3rem\", height:\"auto\", backgroundColor: colour}} />\n\n    }\n\n    private renderDivider(state: string): JSX.Element {\n        const colour = resultColour[state] || Colours.green\n        return <div style={{width:\"0.3rem\", height:\"0.5rem\", backgroundColor: colour}}></div>\n    }\n\n    private renderNestedDivider(depth: number): JSX.Element {\n        return <div className=\"flex flex-row grid-gap-half\">\n            <div style={{width:\"3px\", height:\"auto\"}}></div>\n            {this.renderIndents(depth)}\n            <div className=\"flex-grow\" style={{height:\"1px\", background: \"rgba(16, 22, 26, 0.15)\"}}></div>\n        </div>\n        \n    }\n\n    private renderStackTrace(error: any): JSX.Element {\n        return <Popover className=\"flex flex-row grid-gap-half step margin-auto\" position={Position.LEFT} content={\n                <div className={Classes.CARD + \" pre-wrap flex flex-column\"}>\n                    <H5>Error: {error.name}</H5>\n                    <p>Message: {error.message}</p>\n                    <p>Expected: {error.expected.toString()}</p>\n                    <p>Actual: {error.actual.toString()}</p>\n                    <p>Operator: {error.operator}</p>\n                    <p>{error.stack.toString()}</p>\n                </div>\n            }>\n            {this.renderIcon(\"console\")}\n        </Popover>     \n    }\n\n    private renderScreenshot(screenshotPath: string): JSX.Element {\n        return <div className=\"flex flex-row grid-gap-half step\" onClick={()=> window.open(`${screenshotPath}`, \"_blank\")} style={{cursor: \"pointer\"}}>\n            {this.renderIcon(\"screenshot\")}\n        </div>\n    }\n\n  \n\n    private noSpecSelected() {\n        return <NonIdealState\n            className=\"tab\"\n            icon=\"help\"\n            title=\"Select a spec\"\n            description={\"Select a spec from the menu to start viewing reports\"}\n        />\n    }\n\n    private calculateTotalTime(): string {\n\n        const unixStartTime = Date.parse(this.props.selectedSpec.start)\n        const unixEndTime = Date.parse(this.props.selectedSpec.end)\n        const unixDifference = unixEndTime - unixStartTime\n\n        let seconds: any = parseInt((unixDifference / 1000).toFixed(0))\n        let minutes: any = Math.floor(seconds / 60)\n        let hours: any = 0\n\n        if (minutes > 59) {\n            hours = Math.floor(minutes / 60)\n            minutes = minutes - (hours * 60)\n        }\n\n        seconds = Math.floor(seconds % 60)\n\n        return `${hours}h ${minutes}m ${seconds}s`\n    }\n\n}","import React from 'react';\n\nimport './Dashboard.css';\nimport { StoredSettings } from './Settings';\nimport { SpecTree } from './SpecTree';\nimport { SpecView } from './SpecView';\n\ninterface IAppProps {\n    selectedBuild: string | undefined\n    storedSetting: StoredSettings | undefined\n}\n\ninterface IAppState {\n    selectedSpec: any | undefined\n}\n\nexport class Dashboard extends React.Component<IAppProps, IAppState> {\n\n    public state: IAppState = { selectedSpec: undefined }\n    \n    public render() {\n        return (\n            <div id=\"dashboard\" className=\"flex flex-grow flex-row\">\n                <SpecTree selectedBuild={this.props.selectedBuild} selectedSpec={this.selectedSpec} />\n                <SpecView selectedSpec={this.state.selectedSpec} storedSettings={this.props.storedSetting}/>\n            </div>\n        );\n    }\n\n    selectedSpec = (selectedSpec: any) => {\n        this.setState({selectedSpec: selectedSpec})\n    }\n\n}","import React from 'react';\nimport './App.css';\nimport { Header } from './components/Header';\nimport { Dashboard } from './components/Dashboard';\nimport { StoredSettings } from './components/Settings';\n\ninterface IAppProps {\n\n}\n\ninterface IAppState {\n    selectedBuild: string | undefined,\n    storedSettings: StoredSettings | undefined\n}\n\nexport class App extends React.Component<IAppProps, IAppProps> {\n\n    public state: IAppState = { selectedBuild: undefined, storedSettings: undefined }\n\n    static getDerivedStateFromProps(props: IAppProps, state: IAppState) {\n        if (state.storedSettings === undefined) {\n            const settings: StoredSettings = {\n                showHooks: localStorage.getItem('showHooks') === \"on\" ? true : false,\n                showEmptyHooks: localStorage.getItem('showEmptyHooks') === \"on\" ? true : false,\n                depth: localStorage.getItem('depth') === \"on\" ? true : false\n            }\n            return {\n                storedSettings: settings\n            }\n        }\n        return null\n    }\n\n    public render() {\n        return (\n            <div id=\"app\" className=\"flex flex-column\">\n                <Header selectedBuild={this.selectedBuild} saveSetting={this.saveSettings}/>\n                <Dashboard selectedBuild={this.state.selectedBuild} storedSetting={this.state.storedSettings}/>\n            </div>\n        );\n    }\n\n    selectedBuild = (selectedBuild: string) => {\n        this.setState({selectedBuild: selectedBuild})\n    }\n\n    saveSettings = (storedSettings: any) => {\n        this.setState({ storedSettings: storedSettings });\n    }\n\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\nimport reportWebVitals from './reportWebVitals';\nimport \"@blueprintjs/core/lib/css/blueprint.css\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}